package com.wpp.conart.wpp;import java.util.concurrent.locks.Condition;/** * �������� *  * @author tengfei.fangtf * @version $Id: DeadLockDemo.java, v 0.1 2015-7-18 ����10:08:28 tengfei.fangtf Exp $ */public class DeadLockDemo {    /** A�� */    private static String A = "A";    /** B�� */    private static String B = "B";    public static void main(String[] args) throws InterruptedException{        new DeadLockDemo().deadLock();    }    private void deadLock() throws InterruptedException{//        Thread t1 = new Thread(new Runnable() {//            @Override//            public void run() {//                try {//                    Thread.sleep(2000);//                }catch ( Exception e){//                    e.printStackTrace();//                }//                System.out.println("t1 thread run complete");//            }//        });////        Thread t2 = new Thread(new Runnable() {//            @Override//            public void run() {//                try {//                    Thread.sleep(3000);//                }catch ( Exception e){//                    e.printStackTrace();//                }//                System.out.println("t2 thread run complete");//            }//        });////        t1.start();//        t2.start();//        System.out.println("await all child run over!");////        //等待子线程执行完，才能执行下个线程//        t1.join();//        t2.join();//        System.out.println("main thread exit");        new RunnableTest();        new RunnableTest();        System.out.println("main thread ...........");        Thread a = new Thread(new RunnableTest2());        a.start();        a.interrupt();        //等待进程执行完毕        a.join();        System.out.println("main thread exit");//        Condition    }}