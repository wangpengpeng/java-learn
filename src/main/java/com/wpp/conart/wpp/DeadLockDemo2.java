package com.wpp.conart.wpp;import java.util.concurrent.CountDownLatch;/** * �������� *  * @author tengfei.fangtf * @version $Id: DeadLockDemo.java, v 0.1 2015-7-18 ����10:08:28 tengfei.fangtf Exp $ */public class DeadLockDemo2 {    /** A�� */    private static String A = "A";    /** B�� */    private static String B = "B";    private  static CountDownLatch  countDownLatch = new CountDownLatch(1);    public static void main(String[] args) throws InterruptedException{//        for (int i = 1;i< 10;  i++){            new DeadLockDemo2().deadLock();//        }    }    private void deadLock() throws InterruptedException{        Thread t11 = new Thread(new Runnable() {            @Override            public void run() {                try {                    Thread.sleep(500);                }catch ( Exception e){                    e.printStackTrace();                }                System.out.println("t1 thread run complete");                countDownLatch.countDown();            }        });        Thread t2 = new Thread(new Runnable(){            @Override            public void run() {                try {                    countDownLatch.await();                    Thread.sleep(500);                }catch ( Exception e){                    e.printStackTrace();                }                System.out.println("t2 thread run complete");            }        });        t2.start();        t11.start();        System.out.println("await all child run over!");        //等待子线程执行完，才能执行下个线程        t11.join();        t2.join();        System.out.println("main thread exit");    }}